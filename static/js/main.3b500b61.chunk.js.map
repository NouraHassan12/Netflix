{"version":3,"sources":["img/logo.png","axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","data","results","fetchData","className","map","movie","key","id","src","poster_path","backdrop_path","alt","name","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handelClick","videoId","opts","height","width","playerVars","autoplay","API_key","requests","fetchtrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDecumentsMovies","Banner","str","n","Math","floor","random","length","style","backgroundImage","backgroundSize","backgroundPosition","original_name","overview","substr","Nav","show","handelshow","window","addEventListener","scrollY","removeEventListener","logo","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3b500b61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2ea85d74.png\";","\r\nimport axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://api.themoviedb.org/3'\r\n    ///discover/movie?primary_release_date.gte=2014-09-15&primary_release_date.lte=2014-10-22',\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./RowCSS.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nexport default function Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  // code which runs based on aspecific condition/variable\r\n  useEffect(() => {\r\n    // if [] , run once when the row loads , and dont run again\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      console.log(request.data.results);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  console.log(\"movvies\", movies);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {},\r\n    autoplay: 1\r\n  };\r\n\r\n  const handelClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h1>{title}</h1>\r\n\r\n      <div className=\"row_posters\">\r\n        {movies.map(movie => {\r\n          return (\r\n            <img\r\n              key={movie.id}\r\n              src={`${base_url}${\r\n                isLargeRow ? movie.poster_path : movie.backdrop_path\r\n              }`}\r\n              alt={movie.name}\r\n              className={`row_poster ${isLargeRow && \"row_PosterLarge\"}`}\r\n              onClick={() => handelClick(movie)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n","const API_key=\"aa48e2ed8b81941f2548e862a1f57541\";\r\n\r\nconst requests= {\r\n    fetchtrending:`/trending/all/week?api_key=${API_key}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_key}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_key}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_key}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_key}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_key}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_key}&with_genres=10749`,\r\n    fetchDecumentsMovies:`/discover/movie?api_key=${API_key}&with_genres=99`,\r\n}\r\n\r\nexport default requests\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./BannerCSS.css\";\r\n\r\nfunction Banner() {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovies(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length)\r\n        ]\r\n      );\r\n\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(movies);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n  return (\r\n    <>\r\n      <header\r\n        className=\"banner\"\r\n        style={{\r\n          backgroundImage: `url(\r\n            \"https://image.tmdb.org/t/p/original/${movies?.backdrop_path}\"\r\n        )`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"center center\"\r\n        }}\r\n      >\r\n        <div className=\"banner_contents\">\r\n          <h1 className=\"banner_title\">\r\n            {movies?.title || movies?.name || movies?.original_name}\r\n          </h1>\r\n\r\n          <div className=\"banner_buttons\">\r\n            <button className=\"banner_button\">play</button>\r\n            <button className=\"banner_button\">more info</button>\r\n          </div>\r\n\r\n          <h1 className=\"banner_description\">\r\n            {movies?.overview}\r\n            {truncate(movies?.overview, 150)}\r\n          </h1>\r\n        </div>\r\n\r\n        <div className=\"banner_fadebottom\" />\r\n      </header>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport logo from \"../src/img/logo.png\";\r\nimport \"./NavCSS.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handelshow] = useState(false);\r\n\r\n  useEffect(()=>{\r\n      window.addEventListener('scroll' ,()=>{\r\n          if( window.scrollY >100){\r\n              handelshow(true)\r\n          }else{\r\n              handelshow(false)\r\n          }\r\n      });\r\n      return ()=>{\r\n        window.removeEventListener('scroll')\r\n      }\r\n\r\n  } , []);\r\n  return (\r\n    <div className={`nav ${show && 'nav_black'}`}>\r\n      <img src={logo} alt=\"logo\" className=\"nav_logo\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport \"./App.css\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Nav />\n      <Banner />\n    \n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchtrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDecumentsMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}